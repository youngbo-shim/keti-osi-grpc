// Generated by gencpp from file perception_msgs/TrafficSignalPhase.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_TRAFFICSIGNALPHASE_H
#define PERCEPTION_MSGS_MESSAGE_TRAFFICSIGNALPHASE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace perception_msgs
{
template <class ContainerAllocator>
struct TrafficSignalPhase_
{
  typedef TrafficSignalPhase_<ContainerAllocator> Type;

  TrafficSignalPhase_()
    : signal_phase(0)
    , blink(false)  {
    }
  TrafficSignalPhase_(const ContainerAllocator& _alloc)
    : signal_phase(0)
    , blink(false)  {
  (void)_alloc;
    }



   typedef uint8_t _signal_phase_type;
  _signal_phase_type signal_phase;

   typedef uint8_t _blink_type;
  _blink_type blink;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OFF)
  #undef OFF
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(GREEN)
  #undef GREEN
#endif
#if defined(_WIN32) && defined(GREEN_LEFT)
  #undef GREEN_LEFT
#endif
#if defined(_WIN32) && defined(RED)
  #undef RED
#endif
#if defined(_WIN32) && defined(RED_LEFT)
  #undef RED_LEFT
#endif
#if defined(_WIN32) && defined(YELLOW)
  #undef YELLOW
#endif
#if defined(_WIN32) && defined(RED_YELLOW)
  #undef RED_YELLOW
#endif
#if defined(_WIN32) && defined(YELLOW21)
  #undef YELLOW21
#endif
#if defined(_WIN32) && defined(YELLOW_GREEN4)
  #undef YELLOW_GREEN4
#endif
#if defined(_WIN32) && defined(YELLOW_OTHER)
  #undef YELLOW_OTHER
#endif
#if defined(_WIN32) && defined(PEDESTRIAN)
  #undef PEDESTRIAN
#endif
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif

  enum {
    OFF = 0u,
    UNKNOWN = 1u,
    GREEN = 2u,
    GREEN_LEFT = 3u,
    RED = 4u,
    RED_LEFT = 5u,
    YELLOW = 6u,
    RED_YELLOW = 7u,
    YELLOW21 = 8u,
    YELLOW_GREEN4 = 9u,
    YELLOW_OTHER = 10u,
    PEDESTRIAN = 11u,
    NONE = 99u,
  };


  typedef boost::shared_ptr< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficSignalPhase_

typedef ::perception_msgs::TrafficSignalPhase_<std::allocator<void> > TrafficSignalPhase;

typedef boost::shared_ptr< ::perception_msgs::TrafficSignalPhase > TrafficSignalPhasePtr;
typedef boost::shared_ptr< ::perception_msgs::TrafficSignalPhase const> TrafficSignalPhaseConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_msgs::TrafficSignalPhase_<ContainerAllocator1> & lhs, const ::perception_msgs::TrafficSignalPhase_<ContainerAllocator2> & rhs)
{
  return lhs.signal_phase == rhs.signal_phase &&
    lhs.blink == rhs.blink;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_msgs::TrafficSignalPhase_<ContainerAllocator1> & lhs, const ::perception_msgs::TrafficSignalPhase_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a6468006fa72143ac0c286535c92928";
  }

  static const char* value(const ::perception_msgs::TrafficSignalPhase_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a6468006fa72143ULL;
  static const uint64_t static_value2 = 0xac0c286535c92928ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/TrafficSignalPhase";
  }

  static const char* value(const ::perception_msgs::TrafficSignalPhase_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 OFF = 0\n"
"uint8 UNKNOWN = 1\n"
"uint8 GREEN = 2\n"
"uint8 GREEN_LEFT = 3\n"
"uint8 RED = 4\n"
"uint8 RED_LEFT = 5\n"
"uint8 YELLOW = 6\n"
"uint8 RED_YELLOW = 7\n"
"uint8 YELLOW21 = 8\n"
"uint8 YELLOW_GREEN4 = 9\n"
"uint8 YELLOW_OTHER = 10\n"
"uint8 PEDESTRIAN = 11\n"
"uint8 NONE = 99\n"
"\n"
"uint8 signal_phase\n"
"bool blink\n"
;
  }

  static const char* value(const ::perception_msgs::TrafficSignalPhase_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.signal_phase);
      stream.next(m.blink);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficSignalPhase_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::TrafficSignalPhase_<ContainerAllocator>& v)
  {
    s << indent << "signal_phase: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.signal_phase);
    s << indent << "blink: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blink);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_TRAFFICSIGNALPHASE_H
