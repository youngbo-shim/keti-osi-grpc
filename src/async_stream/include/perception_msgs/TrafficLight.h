// Generated by gencpp from file perception_msgs/TrafficLight.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_TRAFFICLIGHT_H
#define PERCEPTION_MSGS_MESSAGE_TRAFFICLIGHT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <perception_msgs/TrafficSignalPhase.h>
#include <perception_msgs/TrafficSignalPhase.h>
#include <geometry_msgs/Point.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct TrafficLight_
{
  typedef TrafficLight_<ContainerAllocator> Type;

  TrafficLight_()
    : id()
    , signal_group_id()
    , type(0)
    , signal_phase()
    , next_signal_phase()
    , remaining_time(0.0)
    , point()
    , heading(0.0)  {
    }
  TrafficLight_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , signal_group_id(_alloc)
    , type(0)
    , signal_phase(_alloc)
    , next_signal_phase(_alloc)
    , remaining_time(0.0)
    , point(_alloc)
    , heading(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _signal_group_id_type;
  _signal_group_id_type signal_group_id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef  ::perception_msgs::TrafficSignalPhase_<ContainerAllocator>  _signal_phase_type;
  _signal_phase_type signal_phase;

   typedef  ::perception_msgs::TrafficSignalPhase_<ContainerAllocator>  _next_signal_phase_type;
  _next_signal_phase_type next_signal_phase;

   typedef double _remaining_time_type;
  _remaining_time_type remaining_time;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef double _heading_type;
  _heading_type heading;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(HORIZONTAL_TRICOLOR)
  #undef HORIZONTAL_TRICOLOR
#endif
#if defined(_WIN32) && defined(HORIZONTAL_FOURCOLORA)
  #undef HORIZONTAL_FOURCOLORA
#endif
#if defined(_WIN32) && defined(HORIZONTAL_FOURCOLORB)
  #undef HORIZONTAL_FOURCOLORB
#endif
#if defined(_WIN32) && defined(HORIZONTAL_ARROW_TRICOLOR)
  #undef HORIZONTAL_ARROW_TRICOLOR
#endif
#if defined(_WIN32) && defined(VERTICAL_TRICOLOR)
  #undef VERTICAL_TRICOLOR
#endif
#if defined(_WIN32) && defined(ERTICAL_ARROW_TRICOLOR)
  #undef ERTICAL_ARROW_TRICOLOR
#endif
#if defined(_WIN32) && defined(VERTICAL_FOURCOLOR)
  #undef VERTICAL_FOURCOLOR
#endif
#if defined(_WIN32) && defined(BUS_TRICOLOR)
  #undef BUS_TRICOLOR
#endif
#if defined(_WIN32) && defined(VARIABLE_TRAFFIC_LANE_CONTROL)
  #undef VARIABLE_TRAFFIC_LANE_CONTROL
#endif
#if defined(_WIN32) && defined(VARIABLE_ALARM)
  #undef VARIABLE_ALARM
#endif
#if defined(_WIN32) && defined(PEDESTRIAN)
  #undef PEDESTRIAN
#endif
#if defined(_WIN32) && defined(VERTICAL_BICYCLE_TRICOLOR)
  #undef VERTICAL_BICYCLE_TRICOLOR
#endif
#if defined(_WIN32) && defined(VERTICAL_BICYCLE_TWOCOLOR)
  #undef VERTICAL_BICYCLE_TWOCOLOR
#endif
#if defined(_WIN32) && defined(VERTICCAL_AUXILIARY_TRICOLOR)
  #undef VERTICCAL_AUXILIARY_TRICOLOR
#endif
#if defined(_WIN32) && defined(VERTICCAL_AUXILIARY_FOURCOLOR)
  #undef VERTICCAL_AUXILIARY_FOURCOLOR
#endif
#if defined(_WIN32) && defined(OTHERS_TRAFFIC_LIGHT_TYPE)
  #undef OTHERS_TRAFFIC_LIGHT_TYPE
#endif

  enum {
    HORIZONTAL_TRICOLOR = 1u,
    HORIZONTAL_FOURCOLORA = 2u,
    HORIZONTAL_FOURCOLORB = 3u,
    HORIZONTAL_ARROW_TRICOLOR = 4u,
    VERTICAL_TRICOLOR = 5u,
    ERTICAL_ARROW_TRICOLOR = 6u,
    VERTICAL_FOURCOLOR = 7u,
    BUS_TRICOLOR = 8u,
    VARIABLE_TRAFFIC_LANE_CONTROL = 9u,
    VARIABLE_ALARM = 10u,
    PEDESTRIAN = 11u,
    VERTICAL_BICYCLE_TRICOLOR = 12u,
    VERTICAL_BICYCLE_TWOCOLOR = 13u,
    VERTICCAL_AUXILIARY_TRICOLOR = 14u,
    VERTICCAL_AUXILIARY_FOURCOLOR = 15u,
    OTHERS_TRAFFIC_LIGHT_TYPE = 99u,
  };


  typedef boost::shared_ptr< ::perception_msgs::TrafficLight_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::TrafficLight_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficLight_

typedef ::perception_msgs::TrafficLight_<std::allocator<void> > TrafficLight;

typedef boost::shared_ptr< ::perception_msgs::TrafficLight > TrafficLightPtr;
typedef boost::shared_ptr< ::perception_msgs::TrafficLight const> TrafficLightConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::TrafficLight_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::TrafficLight_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_msgs::TrafficLight_<ContainerAllocator1> & lhs, const ::perception_msgs::TrafficLight_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.signal_group_id == rhs.signal_group_id &&
    lhs.type == rhs.type &&
    lhs.signal_phase == rhs.signal_phase &&
    lhs.next_signal_phase == rhs.next_signal_phase &&
    lhs.remaining_time == rhs.remaining_time &&
    lhs.point == rhs.point &&
    lhs.heading == rhs.heading;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_msgs::TrafficLight_<ContainerAllocator1> & lhs, const ::perception_msgs::TrafficLight_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::TrafficLight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::TrafficLight_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::TrafficLight_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::TrafficLight_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::TrafficLight_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::TrafficLight_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::TrafficLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c716c24f61090d9f4b47c9ca880ccd7a";
  }

  static const char* value(const ::perception_msgs::TrafficLight_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc716c24f61090d9fULL;
  static const uint64_t static_value2 = 0x4b47c9ca880ccd7aULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::TrafficLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/TrafficLight";
  }

  static const char* value(const ::perception_msgs::TrafficLight_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::TrafficLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 HORIZONTAL_TRICOLOR = 1               # 차량횡형-삼색등\n"
"uint8 HORIZONTAL_FOURCOLORA = 2             # 차량횡형-사색등A\n"
"uint8 HORIZONTAL_FOURCOLORB = 3             # 차량횡형-사색등B\n"
"uint8 HORIZONTAL_ARROW_TRICOLOR = 4         # 차량횡형-화살표삼색등\n"
"uint8 VERTICAL_TRICOLOR = 5                 # 차량종형-삼색등\n"
"uint8 ERTICAL_ARROW_TRICOLOR = 6            # 차량종형-화살표삼색등\n"
"uint8 VERTICAL_FOURCOLOR = 7                # 차량종형-사색등\n"
"uint8 BUS_TRICOLOR = 8                      # 버스삼색등\n"
"uint8 VARIABLE_TRAFFIC_LANE_CONTROL = 9     # 가변형 가변등\n"
"uint8 VARIABLE_ALARM = 10                   # 경보형 가변등\n"
"uint8 PEDESTRIAN = 11                       # 보행등\n"
"uint8 VERTICAL_BICYCLE_TRICOLOR = 12        # 자전거종형-삼색등\n"
"uint8 VERTICAL_BICYCLE_TWOCOLOR = 13        # 자전거종형-이색등\n"
"uint8 VERTICCAL_AUXILIARY_TRICOLOR = 14     # 차량보조등-종형삼색등\n"
"uint8 VERTICCAL_AUXILIARY_FOURCOLOR = 15    # 차량보조등-종형사색등\n"
"uint8 OTHERS_TRAFFIC_LIGHT_TYPE = 99        # 기타 신호등 유형\n"
"\n"
"string id\n"
"string signal_group_id\n"
"uint8 type\n"
"perception_msgs/TrafficSignalPhase signal_phase\n"
"perception_msgs/TrafficSignalPhase next_signal_phase\n"
"float64 remaining_time\n"
"geometry_msgs/Point point\n"
"float64 heading\n"
"================================================================================\n"
"MSG: perception_msgs/TrafficSignalPhase\n"
"uint8 OFF = 0\n"
"uint8 UNKNOWN = 1\n"
"uint8 GREEN = 2\n"
"uint8 GREEN_LEFT = 3\n"
"uint8 RED = 4\n"
"uint8 RED_LEFT = 5\n"
"uint8 YELLOW = 6\n"
"uint8 RED_YELLOW = 7\n"
"uint8 YELLOW21 = 8\n"
"uint8 YELLOW_GREEN4 = 9\n"
"uint8 YELLOW_OTHER = 10\n"
"uint8 PEDESTRIAN = 11\n"
"uint8 NONE = 99\n"
"\n"
"uint8 signal_phase\n"
"bool blink\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::perception_msgs::TrafficLight_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::TrafficLight_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.signal_group_id);
      stream.next(m.type);
      stream.next(m.signal_phase);
      stream.next(m.next_signal_phase);
      stream.next(m.remaining_time);
      stream.next(m.point);
      stream.next(m.heading);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficLight_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::TrafficLight_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::TrafficLight_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "signal_group_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.signal_group_id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "signal_phase: ";
    s << std::endl;
    Printer< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> >::stream(s, indent + "  ", v.signal_phase);
    s << indent << "next_signal_phase: ";
    s << std::endl;
    Printer< ::perception_msgs::TrafficSignalPhase_<ContainerAllocator> >::stream(s, indent + "  ", v.next_signal_phase);
    s << indent << "remaining_time: ";
    Printer<double>::stream(s, indent + "  ", v.remaining_time);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_TRAFFICLIGHT_H
