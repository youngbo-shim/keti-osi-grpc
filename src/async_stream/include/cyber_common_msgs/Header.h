// Generated by gencpp from file cyber_common_msgs/Header.msg
// DO NOT EDIT!


#ifndef CYBER_COMMON_MSGS_MESSAGE_HEADER_H
#define CYBER_COMMON_MSGS_MESSAGE_HEADER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cyber_common_msgs/StatusPb.h>

namespace cyber_common_msgs
{
template <class ContainerAllocator>
struct Header_
{
  typedef Header_<ContainerAllocator> Type;

  Header_()
    : timestamp_sec(0.0)
    , module_name()
    , sequence_num(0)
    , lidar_timestamp(0)
    , camera_timestamp(0)
    , radar_timestamp(0)
    , version(0)
    , status()
    , frame_id()  {
    }
  Header_(const ContainerAllocator& _alloc)
    : timestamp_sec(0.0)
    , module_name(_alloc)
    , sequence_num(0)
    , lidar_timestamp(0)
    , camera_timestamp(0)
    , radar_timestamp(0)
    , version(0)
    , status(_alloc)
    , frame_id(_alloc)  {
  (void)_alloc;
    }



   typedef double _timestamp_sec_type;
  _timestamp_sec_type timestamp_sec;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _module_name_type;
  _module_name_type module_name;

   typedef uint32_t _sequence_num_type;
  _sequence_num_type sequence_num;

   typedef uint64_t _lidar_timestamp_type;
  _lidar_timestamp_type lidar_timestamp;

   typedef uint64_t _camera_timestamp_type;
  _camera_timestamp_type camera_timestamp;

   typedef uint64_t _radar_timestamp_type;
  _radar_timestamp_type radar_timestamp;

   typedef uint32_t _version_type;
  _version_type version;

   typedef  ::cyber_common_msgs::StatusPb_<ContainerAllocator>  _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;





  typedef boost::shared_ptr< ::cyber_common_msgs::Header_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cyber_common_msgs::Header_<ContainerAllocator> const> ConstPtr;

}; // struct Header_

typedef ::cyber_common_msgs::Header_<std::allocator<void> > Header;

typedef boost::shared_ptr< ::cyber_common_msgs::Header > HeaderPtr;
typedef boost::shared_ptr< ::cyber_common_msgs::Header const> HeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cyber_common_msgs::Header_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cyber_common_msgs::Header_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cyber_common_msgs::Header_<ContainerAllocator1> & lhs, const ::cyber_common_msgs::Header_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp_sec == rhs.timestamp_sec &&
    lhs.module_name == rhs.module_name &&
    lhs.sequence_num == rhs.sequence_num &&
    lhs.lidar_timestamp == rhs.lidar_timestamp &&
    lhs.camera_timestamp == rhs.camera_timestamp &&
    lhs.radar_timestamp == rhs.radar_timestamp &&
    lhs.version == rhs.version &&
    lhs.status == rhs.status &&
    lhs.frame_id == rhs.frame_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cyber_common_msgs::Header_<ContainerAllocator1> & lhs, const ::cyber_common_msgs::Header_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cyber_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cyber_common_msgs::Header_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cyber_common_msgs::Header_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_common_msgs::Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_common_msgs::Header_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_common_msgs::Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_common_msgs::Header_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cyber_common_msgs::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a02fe8efdb46f0413f8cbe5377f33e2c";
  }

  static const char* value(const ::cyber_common_msgs::Header_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa02fe8efdb46f041ULL;
  static const uint64_t static_value2 = 0x3f8cbe5377f33e2cULL;
};

template<class ContainerAllocator>
struct DataType< ::cyber_common_msgs::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cyber_common_msgs/Header";
  }

  static const char* value(const ::cyber_common_msgs::Header_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cyber_common_msgs::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timestamp_sec\n"
"\n"
"# Module name.\n"
"string module_name\n"
"\n"
"# Sequence number for each message. Each module maintains its own counter for\n"
"# sequence_num, always starting from 1 on boot.\n"
"uint32 sequence_num\n"
"\n"
"# Lidar Sensor timestamp for nano-second.\n"
"uint64 lidar_timestamp\n"
"\n"
"# Camera Sensor timestamp for nano-second.\n"
"uint64 camera_timestamp\n"
"\n"
"# Radar Sensor timestamp for nano-second.\n"
"uint64 radar_timestamp\n"
"\n"
"# data version\n"
"uint32 version\n"
"\n"
"StatusPb status\n"
"\n"
"string frame_id\n"
"================================================================================\n"
"MSG: cyber_common_msgs/StatusPb\n"
"ErrorCode error_code\n"
"string msg\n"
"================================================================================\n"
"MSG: cyber_common_msgs/ErrorCode\n"
"# No error, returns on success.\n"
"uint16  OK = 0\n"
"\n"
"# Control module error codes start from here.\n"
"uint16  CONTROL_ERROR = 1000\n"
"uint16  CONTROL_INIT_ERROR = 1001\n"
"uint16  CONTROL_COMPUTE_ERROR = 1002\n"
"uint16  CONTROL_ESTOP_ERROR = 1003\n"
"uint16  PERFECT_CONTROL_ERROR = 1004\n"
"\n"
"# Canbus module error codes start from here.\n"
"uint16  CANBUS_ERROR = 2000\n"
"uint16  CAN_CLIENT_ERROR_BASE = 2100\n"
"uint16  CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED = 2101\n"
"uint16  CAN_CLIENT_ERROR_FRAME_NUM = 2102\n"
"uint16  CAN_CLIENT_ERROR_SEND_FAILED = 2103\n"
"uint16  CAN_CLIENT_ERROR_RECV_FAILED = 2104\n"
"\n"
"# Localization module error codes start from here.\n"
"uint16  LOCALIZATION_ERROR = 3000\n"
"uint16  LOCALIZATION_ERROR_MSG = 3100\n"
"uint16  LOCALIZATION_ERROR_LIDAR = 3200\n"
"uint16  LOCALIZATION_ERROR_INTEG = 3300\n"
"uint16  LOCALIZATION_ERROR_GNSS = 3400\n"
"\n"
"# Perception module error codes start from here.\n"
"uint16  PERCEPTION_ERROR = 4000\n"
"uint16  PERCEPTION_ERROR_TF = 4001\n"
"uint16  PERCEPTION_ERROR_PROCESS = 4002\n"
"uint16  PERCEPTION_FATAL = 4003\n"
"uint16  PERCEPTION_ERROR_NONE = 4004\n"
"uint16  PERCEPTION_ERROR_UNKNOWN = 4005\n"
"\n"
"# Prediction module error codes start from here.\n"
"uint16  PREDICTION_ERROR = 5000\n"
"\n"
"# Planning module error codes start from here\n"
"uint16  PLANNING_ERROR = 6000\n"
"uint16  PLANNING_ERROR_NOT_READY = 6001\n"
"\n"
"# HDMap module error codes start from here\n"
"uint16  HDMAP_DATA_ERROR = 7000\n"
"\n"
"# Routing module error codes\n"
"uint16  ROUTING_ERROR = 8000\n"
"uint16  ROUTING_ERROR_REQUEST = 8001\n"
"uint16  ROUTING_ERROR_RESPONSE = 8002\n"
"uint16  ROUTING_ERROR_NOT_READY = 8003\n"
"\n"
"# Indicates an input has been exhausted.\n"
"uint16  END_OF_INPUT = 9000\n"
"\n"
"# HTTP request error codes.\n"
"uint16  HTTP_LOGIC_ERROR = 10000\n"
"uint16  HTTP_RUNTIME_ERROR = 10001\n"
"\n"
"# Relative Map error codes.\n"
"uint16  RELATIVE_MAP_ERROR = 11000  # general relative map error code\n"
"uint16  RELATIVE_MAP_NOT_READY = 11001\n"
"\n"
"# Driver error codes.\n"
"uint16  DRIVER_ERROR_GNSS = 12000\n"
"uint16  DRIVER_ERROR_VELODYNE = 13000\n"
"\n"
"# Storytelling error codes.\n"
"uint16  STORYTELLING_ERROR = 14000\n"
"\n"
"uint16 code\n"
;
  }

  static const char* value(const ::cyber_common_msgs::Header_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cyber_common_msgs::Header_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_sec);
      stream.next(m.module_name);
      stream.next(m.sequence_num);
      stream.next(m.lidar_timestamp);
      stream.next(m.camera_timestamp);
      stream.next(m.radar_timestamp);
      stream.next(m.version);
      stream.next(m.status);
      stream.next(m.frame_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Header_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cyber_common_msgs::Header_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cyber_common_msgs::Header_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_sec: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp_sec);
    s << indent << "module_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.module_name);
    s << indent << "sequence_num: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sequence_num);
    s << indent << "lidar_timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.lidar_timestamp);
    s << indent << "camera_timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.camera_timestamp);
    s << indent << "radar_timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.radar_timestamp);
    s << indent << "version: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.version);
    s << indent << "status: ";
    s << std::endl;
    Printer< ::cyber_common_msgs::StatusPb_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CYBER_COMMON_MSGS_MESSAGE_HEADER_H
