// Generated by gencpp from file cyber_common_msgs/ErrorCode.msg
// DO NOT EDIT!


#ifndef CYBER_COMMON_MSGS_MESSAGE_ERRORCODE_H
#define CYBER_COMMON_MSGS_MESSAGE_ERRORCODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cyber_common_msgs
{
template <class ContainerAllocator>
struct ErrorCode_
{
  typedef ErrorCode_<ContainerAllocator> Type;

  ErrorCode_()
    : code(0)  {
    }
  ErrorCode_(const ContainerAllocator& _alloc)
    : code(0)  {
  (void)_alloc;
    }



   typedef uint16_t _code_type;
  _code_type code;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OK)
  #undef OK
#endif
#if defined(_WIN32) && defined(CONTROL_ERROR)
  #undef CONTROL_ERROR
#endif
#if defined(_WIN32) && defined(CONTROL_INIT_ERROR)
  #undef CONTROL_INIT_ERROR
#endif
#if defined(_WIN32) && defined(CONTROL_COMPUTE_ERROR)
  #undef CONTROL_COMPUTE_ERROR
#endif
#if defined(_WIN32) && defined(CONTROL_ESTOP_ERROR)
  #undef CONTROL_ESTOP_ERROR
#endif
#if defined(_WIN32) && defined(PERFECT_CONTROL_ERROR)
  #undef PERFECT_CONTROL_ERROR
#endif
#if defined(_WIN32) && defined(CANBUS_ERROR)
  #undef CANBUS_ERROR
#endif
#if defined(_WIN32) && defined(CAN_CLIENT_ERROR_BASE)
  #undef CAN_CLIENT_ERROR_BASE
#endif
#if defined(_WIN32) && defined(CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED)
  #undef CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED
#endif
#if defined(_WIN32) && defined(CAN_CLIENT_ERROR_FRAME_NUM)
  #undef CAN_CLIENT_ERROR_FRAME_NUM
#endif
#if defined(_WIN32) && defined(CAN_CLIENT_ERROR_SEND_FAILED)
  #undef CAN_CLIENT_ERROR_SEND_FAILED
#endif
#if defined(_WIN32) && defined(CAN_CLIENT_ERROR_RECV_FAILED)
  #undef CAN_CLIENT_ERROR_RECV_FAILED
#endif
#if defined(_WIN32) && defined(LOCALIZATION_ERROR)
  #undef LOCALIZATION_ERROR
#endif
#if defined(_WIN32) && defined(LOCALIZATION_ERROR_MSG)
  #undef LOCALIZATION_ERROR_MSG
#endif
#if defined(_WIN32) && defined(LOCALIZATION_ERROR_LIDAR)
  #undef LOCALIZATION_ERROR_LIDAR
#endif
#if defined(_WIN32) && defined(LOCALIZATION_ERROR_INTEG)
  #undef LOCALIZATION_ERROR_INTEG
#endif
#if defined(_WIN32) && defined(LOCALIZATION_ERROR_GNSS)
  #undef LOCALIZATION_ERROR_GNSS
#endif
#if defined(_WIN32) && defined(PERCEPTION_ERROR)
  #undef PERCEPTION_ERROR
#endif
#if defined(_WIN32) && defined(PERCEPTION_ERROR_TF)
  #undef PERCEPTION_ERROR_TF
#endif
#if defined(_WIN32) && defined(PERCEPTION_ERROR_PROCESS)
  #undef PERCEPTION_ERROR_PROCESS
#endif
#if defined(_WIN32) && defined(PERCEPTION_FATAL)
  #undef PERCEPTION_FATAL
#endif
#if defined(_WIN32) && defined(PERCEPTION_ERROR_NONE)
  #undef PERCEPTION_ERROR_NONE
#endif
#if defined(_WIN32) && defined(PERCEPTION_ERROR_UNKNOWN)
  #undef PERCEPTION_ERROR_UNKNOWN
#endif
#if defined(_WIN32) && defined(PREDICTION_ERROR)
  #undef PREDICTION_ERROR
#endif
#if defined(_WIN32) && defined(PLANNING_ERROR)
  #undef PLANNING_ERROR
#endif
#if defined(_WIN32) && defined(PLANNING_ERROR_NOT_READY)
  #undef PLANNING_ERROR_NOT_READY
#endif
#if defined(_WIN32) && defined(HDMAP_DATA_ERROR)
  #undef HDMAP_DATA_ERROR
#endif
#if defined(_WIN32) && defined(ROUTING_ERROR)
  #undef ROUTING_ERROR
#endif
#if defined(_WIN32) && defined(ROUTING_ERROR_REQUEST)
  #undef ROUTING_ERROR_REQUEST
#endif
#if defined(_WIN32) && defined(ROUTING_ERROR_RESPONSE)
  #undef ROUTING_ERROR_RESPONSE
#endif
#if defined(_WIN32) && defined(ROUTING_ERROR_NOT_READY)
  #undef ROUTING_ERROR_NOT_READY
#endif
#if defined(_WIN32) && defined(END_OF_INPUT)
  #undef END_OF_INPUT
#endif
#if defined(_WIN32) && defined(HTTP_LOGIC_ERROR)
  #undef HTTP_LOGIC_ERROR
#endif
#if defined(_WIN32) && defined(HTTP_RUNTIME_ERROR)
  #undef HTTP_RUNTIME_ERROR
#endif
#if defined(_WIN32) && defined(RELATIVE_MAP_ERROR)
  #undef RELATIVE_MAP_ERROR
#endif
#if defined(_WIN32) && defined(RELATIVE_MAP_NOT_READY)
  #undef RELATIVE_MAP_NOT_READY
#endif
#if defined(_WIN32) && defined(DRIVER_ERROR_GNSS)
  #undef DRIVER_ERROR_GNSS
#endif
#if defined(_WIN32) && defined(DRIVER_ERROR_VELODYNE)
  #undef DRIVER_ERROR_VELODYNE
#endif
#if defined(_WIN32) && defined(STORYTELLING_ERROR)
  #undef STORYTELLING_ERROR
#endif

  enum {
    OK = 0u,
    CONTROL_ERROR = 1000u,
    CONTROL_INIT_ERROR = 1001u,
    CONTROL_COMPUTE_ERROR = 1002u,
    CONTROL_ESTOP_ERROR = 1003u,
    PERFECT_CONTROL_ERROR = 1004u,
    CANBUS_ERROR = 2000u,
    CAN_CLIENT_ERROR_BASE = 2100u,
    CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED = 2101u,
    CAN_CLIENT_ERROR_FRAME_NUM = 2102u,
    CAN_CLIENT_ERROR_SEND_FAILED = 2103u,
    CAN_CLIENT_ERROR_RECV_FAILED = 2104u,
    LOCALIZATION_ERROR = 3000u,
    LOCALIZATION_ERROR_MSG = 3100u,
    LOCALIZATION_ERROR_LIDAR = 3200u,
    LOCALIZATION_ERROR_INTEG = 3300u,
    LOCALIZATION_ERROR_GNSS = 3400u,
    PERCEPTION_ERROR = 4000u,
    PERCEPTION_ERROR_TF = 4001u,
    PERCEPTION_ERROR_PROCESS = 4002u,
    PERCEPTION_FATAL = 4003u,
    PERCEPTION_ERROR_NONE = 4004u,
    PERCEPTION_ERROR_UNKNOWN = 4005u,
    PREDICTION_ERROR = 5000u,
    PLANNING_ERROR = 6000u,
    PLANNING_ERROR_NOT_READY = 6001u,
    HDMAP_DATA_ERROR = 7000u,
    ROUTING_ERROR = 8000u,
    ROUTING_ERROR_REQUEST = 8001u,
    ROUTING_ERROR_RESPONSE = 8002u,
    ROUTING_ERROR_NOT_READY = 8003u,
    END_OF_INPUT = 9000u,
    HTTP_LOGIC_ERROR = 10000u,
    HTTP_RUNTIME_ERROR = 10001u,
    RELATIVE_MAP_ERROR = 11000u,
    RELATIVE_MAP_NOT_READY = 11001u,
    DRIVER_ERROR_GNSS = 12000u,
    DRIVER_ERROR_VELODYNE = 13000u,
    STORYTELLING_ERROR = 14000u,
  };


  typedef boost::shared_ptr< ::cyber_common_msgs::ErrorCode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cyber_common_msgs::ErrorCode_<ContainerAllocator> const> ConstPtr;

}; // struct ErrorCode_

typedef ::cyber_common_msgs::ErrorCode_<std::allocator<void> > ErrorCode;

typedef boost::shared_ptr< ::cyber_common_msgs::ErrorCode > ErrorCodePtr;
typedef boost::shared_ptr< ::cyber_common_msgs::ErrorCode const> ErrorCodeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cyber_common_msgs::ErrorCode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cyber_common_msgs::ErrorCode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cyber_common_msgs::ErrorCode_<ContainerAllocator1> & lhs, const ::cyber_common_msgs::ErrorCode_<ContainerAllocator2> & rhs)
{
  return lhs.code == rhs.code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cyber_common_msgs::ErrorCode_<ContainerAllocator1> & lhs, const ::cyber_common_msgs::ErrorCode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cyber_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cyber_common_msgs::ErrorCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cyber_common_msgs::ErrorCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_common_msgs::ErrorCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_common_msgs::ErrorCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_common_msgs::ErrorCode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_common_msgs::ErrorCode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cyber_common_msgs::ErrorCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "991cdd58a85c46c774419812d9fd8eba";
  }

  static const char* value(const ::cyber_common_msgs::ErrorCode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x991cdd58a85c46c7ULL;
  static const uint64_t static_value2 = 0x74419812d9fd8ebaULL;
};

template<class ContainerAllocator>
struct DataType< ::cyber_common_msgs::ErrorCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cyber_common_msgs/ErrorCode";
  }

  static const char* value(const ::cyber_common_msgs::ErrorCode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cyber_common_msgs::ErrorCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# No error, returns on success.\n"
"uint16  OK = 0\n"
"\n"
"# Control module error codes start from here.\n"
"uint16  CONTROL_ERROR = 1000\n"
"uint16  CONTROL_INIT_ERROR = 1001\n"
"uint16  CONTROL_COMPUTE_ERROR = 1002\n"
"uint16  CONTROL_ESTOP_ERROR = 1003\n"
"uint16  PERFECT_CONTROL_ERROR = 1004\n"
"\n"
"# Canbus module error codes start from here.\n"
"uint16  CANBUS_ERROR = 2000\n"
"uint16  CAN_CLIENT_ERROR_BASE = 2100\n"
"uint16  CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED = 2101\n"
"uint16  CAN_CLIENT_ERROR_FRAME_NUM = 2102\n"
"uint16  CAN_CLIENT_ERROR_SEND_FAILED = 2103\n"
"uint16  CAN_CLIENT_ERROR_RECV_FAILED = 2104\n"
"\n"
"# Localization module error codes start from here.\n"
"uint16  LOCALIZATION_ERROR = 3000\n"
"uint16  LOCALIZATION_ERROR_MSG = 3100\n"
"uint16  LOCALIZATION_ERROR_LIDAR = 3200\n"
"uint16  LOCALIZATION_ERROR_INTEG = 3300\n"
"uint16  LOCALIZATION_ERROR_GNSS = 3400\n"
"\n"
"# Perception module error codes start from here.\n"
"uint16  PERCEPTION_ERROR = 4000\n"
"uint16  PERCEPTION_ERROR_TF = 4001\n"
"uint16  PERCEPTION_ERROR_PROCESS = 4002\n"
"uint16  PERCEPTION_FATAL = 4003\n"
"uint16  PERCEPTION_ERROR_NONE = 4004\n"
"uint16  PERCEPTION_ERROR_UNKNOWN = 4005\n"
"\n"
"# Prediction module error codes start from here.\n"
"uint16  PREDICTION_ERROR = 5000\n"
"\n"
"# Planning module error codes start from here\n"
"uint16  PLANNING_ERROR = 6000\n"
"uint16  PLANNING_ERROR_NOT_READY = 6001\n"
"\n"
"# HDMap module error codes start from here\n"
"uint16  HDMAP_DATA_ERROR = 7000\n"
"\n"
"# Routing module error codes\n"
"uint16  ROUTING_ERROR = 8000\n"
"uint16  ROUTING_ERROR_REQUEST = 8001\n"
"uint16  ROUTING_ERROR_RESPONSE = 8002\n"
"uint16  ROUTING_ERROR_NOT_READY = 8003\n"
"\n"
"# Indicates an input has been exhausted.\n"
"uint16  END_OF_INPUT = 9000\n"
"\n"
"# HTTP request error codes.\n"
"uint16  HTTP_LOGIC_ERROR = 10000\n"
"uint16  HTTP_RUNTIME_ERROR = 10001\n"
"\n"
"# Relative Map error codes.\n"
"uint16  RELATIVE_MAP_ERROR = 11000  # general relative map error code\n"
"uint16  RELATIVE_MAP_NOT_READY = 11001\n"
"\n"
"# Driver error codes.\n"
"uint16  DRIVER_ERROR_GNSS = 12000\n"
"uint16  DRIVER_ERROR_VELODYNE = 13000\n"
"\n"
"# Storytelling error codes.\n"
"uint16  STORYTELLING_ERROR = 14000\n"
"\n"
"uint16 code\n"
;
  }

  static const char* value(const ::cyber_common_msgs::ErrorCode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cyber_common_msgs::ErrorCode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ErrorCode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cyber_common_msgs::ErrorCode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cyber_common_msgs::ErrorCode_<ContainerAllocator>& v)
  {
    s << indent << "code: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CYBER_COMMON_MSGS_MESSAGE_ERRORCODE_H
