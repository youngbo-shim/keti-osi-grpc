// Generated by gencpp from file cyber_perception_msgs/LightStatus.msg
// DO NOT EDIT!


#ifndef CYBER_PERCEPTION_MSGS_MESSAGE_LIGHTSTATUS_H
#define CYBER_PERCEPTION_MSGS_MESSAGE_LIGHTSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cyber_perception_msgs
{
template <class ContainerAllocator>
struct LightStatus_
{
  typedef LightStatus_<ContainerAllocator> Type;

  LightStatus_()
    : brake_visible(0.0)
    , brake_switch_on(0.0)
    , left_turn_visible(0.0)
    , left_turn_switch_on(0.0)
    , right_turn_visible(0.0)
    , right_turn_switch_on(0.0)  {
    }
  LightStatus_(const ContainerAllocator& _alloc)
    : brake_visible(0.0)
    , brake_switch_on(0.0)
    , left_turn_visible(0.0)
    , left_turn_switch_on(0.0)
    , right_turn_visible(0.0)
    , right_turn_switch_on(0.0)  {
  (void)_alloc;
    }



   typedef double _brake_visible_type;
  _brake_visible_type brake_visible;

   typedef double _brake_switch_on_type;
  _brake_switch_on_type brake_switch_on;

   typedef double _left_turn_visible_type;
  _left_turn_visible_type left_turn_visible;

   typedef double _left_turn_switch_on_type;
  _left_turn_switch_on_type left_turn_switch_on;

   typedef double _right_turn_visible_type;
  _right_turn_visible_type right_turn_visible;

   typedef double _right_turn_switch_on_type;
  _right_turn_switch_on_type right_turn_switch_on;





  typedef boost::shared_ptr< ::cyber_perception_msgs::LightStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cyber_perception_msgs::LightStatus_<ContainerAllocator> const> ConstPtr;

}; // struct LightStatus_

typedef ::cyber_perception_msgs::LightStatus_<std::allocator<void> > LightStatus;

typedef boost::shared_ptr< ::cyber_perception_msgs::LightStatus > LightStatusPtr;
typedef boost::shared_ptr< ::cyber_perception_msgs::LightStatus const> LightStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cyber_perception_msgs::LightStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cyber_perception_msgs::LightStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cyber_perception_msgs::LightStatus_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::LightStatus_<ContainerAllocator2> & rhs)
{
  return lhs.brake_visible == rhs.brake_visible &&
    lhs.brake_switch_on == rhs.brake_switch_on &&
    lhs.left_turn_visible == rhs.left_turn_visible &&
    lhs.left_turn_switch_on == rhs.left_turn_switch_on &&
    lhs.right_turn_visible == rhs.right_turn_visible &&
    lhs.right_turn_switch_on == rhs.right_turn_switch_on;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cyber_perception_msgs::LightStatus_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::LightStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cyber_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::LightStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::LightStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::LightStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::LightStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::LightStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::LightStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cyber_perception_msgs::LightStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f4d169b8be452c0eb58c1d60aff250a";
  }

  static const char* value(const ::cyber_perception_msgs::LightStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f4d169b8be452c0ULL;
  static const uint64_t static_value2 = 0xeb58c1d60aff250aULL;
};

template<class ContainerAllocator>
struct DataType< ::cyber_perception_msgs::LightStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cyber_perception_msgs/LightStatus";
  }

  static const char* value(const ::cyber_perception_msgs::LightStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cyber_perception_msgs::LightStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 brake_visible\n"
"float64 brake_switch_on\n"
"float64 left_turn_visible\n"
"float64 left_turn_switch_on\n"
"float64 right_turn_visible\n"
"float64 right_turn_switch_on\n"
;
  }

  static const char* value(const ::cyber_perception_msgs::LightStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cyber_perception_msgs::LightStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.brake_visible);
      stream.next(m.brake_switch_on);
      stream.next(m.left_turn_visible);
      stream.next(m.left_turn_switch_on);
      stream.next(m.right_turn_visible);
      stream.next(m.right_turn_switch_on);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LightStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cyber_perception_msgs::LightStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cyber_perception_msgs::LightStatus_<ContainerAllocator>& v)
  {
    s << indent << "brake_visible: ";
    Printer<double>::stream(s, indent + "  ", v.brake_visible);
    s << indent << "brake_switch_on: ";
    Printer<double>::stream(s, indent + "  ", v.brake_switch_on);
    s << indent << "left_turn_visible: ";
    Printer<double>::stream(s, indent + "  ", v.left_turn_visible);
    s << indent << "left_turn_switch_on: ";
    Printer<double>::stream(s, indent + "  ", v.left_turn_switch_on);
    s << indent << "right_turn_visible: ";
    Printer<double>::stream(s, indent + "  ", v.right_turn_visible);
    s << indent << "right_turn_switch_on: ";
    Printer<double>::stream(s, indent + "  ", v.right_turn_switch_on);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CYBER_PERCEPTION_MSGS_MESSAGE_LIGHTSTATUS_H
