// Generated by gencpp from file cyber_perception_msgs/PerceptionObstacles.msg
// DO NOT EDIT!


#ifndef CYBER_PERCEPTION_MSGS_MESSAGE_PERCEPTIONOBSTACLES_H
#define CYBER_PERCEPTION_MSGS_MESSAGE_PERCEPTIONOBSTACLES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <cyber_perception_msgs/PerceptionObstacle.h>
#include <cyber_common_msgs/Header.h>
#include <cyber_common_msgs/ErrorCode.h>
#include <cyber_perception_msgs/LaneMarkers.h>
#include <cyber_perception_msgs/CIPVInfo.h>

namespace cyber_perception_msgs
{
template <class ContainerAllocator>
struct PerceptionObstacles_
{
  typedef PerceptionObstacles_<ContainerAllocator> Type;

  PerceptionObstacles_()
    : header()
    , perception_obstacle()
    , cyber_header()
    , error_code()
    , lane_marker()
    , cipv_info()  {
    }
  PerceptionObstacles_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , perception_obstacle(_alloc)
    , cyber_header(_alloc)
    , error_code(_alloc)
    , lane_marker(_alloc)
    , cipv_info(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> >> _perception_obstacle_type;
  _perception_obstacle_type perception_obstacle;

   typedef  ::cyber_common_msgs::Header_<ContainerAllocator>  _cyber_header_type;
  _cyber_header_type cyber_header;

   typedef  ::cyber_common_msgs::ErrorCode_<ContainerAllocator>  _error_code_type;
  _error_code_type error_code;

   typedef  ::cyber_perception_msgs::LaneMarkers_<ContainerAllocator>  _lane_marker_type;
  _lane_marker_type lane_marker;

   typedef  ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator>  _cipv_info_type;
  _cipv_info_type cipv_info;





  typedef boost::shared_ptr< ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator> const> ConstPtr;

}; // struct PerceptionObstacles_

typedef ::cyber_perception_msgs::PerceptionObstacles_<std::allocator<void> > PerceptionObstacles;

typedef boost::shared_ptr< ::cyber_perception_msgs::PerceptionObstacles > PerceptionObstaclesPtr;
typedef boost::shared_ptr< ::cyber_perception_msgs::PerceptionObstacles const> PerceptionObstaclesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.perception_obstacle == rhs.perception_obstacle &&
    lhs.cyber_header == rhs.cyber_header &&
    lhs.error_code == rhs.error_code &&
    lhs.lane_marker == rhs.lane_marker &&
    lhs.cipv_info == rhs.cipv_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cyber_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3190fd5b911b9f4da7191ef22807e195";
  }

  static const char* value(const ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3190fd5b911b9f4dULL;
  static const uint64_t static_value2 = 0xa7191ef22807e195ULL;
};

template<class ContainerAllocator>
struct DataType< ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cyber_perception_msgs/PerceptionObstacles";
  }

  static const char* value(const ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"PerceptionObstacle[] perception_obstacle  # An array of obstacles\n"
"cyber_common_msgs/Header cyber_header             # Header\n"
"cyber_common_msgs/ErrorCode error_code\n"
"\n"
"LaneMarkers lane_marker\n"
"CIPVInfo cipv_info  # Closest In Path Vehicle (CIPV)\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/PerceptionObstacle\n"
"int32 id  # obstacle ID.\n"
"\n"
"# obstacle position in the world coordinate system.\n"
"cyber_common_msgs/Point3D position\n"
"\n"
"float64 theta  # heading in the world coordinate system.\n"
"\n"
"cyber_common_msgs/Point3D velocity  # obstacle velocity.\n"
"\n"
"# Size of obstacle bounding box.\n"
"float64 length  # obstacle length.\n"
"float64 width   # obstacle width.\n"
"float64 height  # obstacle height.\n"
"\n"
"cyber_common_msgs/Point3D[] polygon_point  # obstacle corner points.\n"
"\n"
"# duration of an obstacle since detection in s.\n"
"float64 tracking_time\n"
"\n"
"ObstacleType type\n"
"\n"
"float64 timestamp  # GPS time in seconds.\n"
"\n"
"# The following fields are new added in Apollo 4.0\n"
"cyber_common_msgs/Point3D acceleration  # obstacle acceleration\n"
"\n"
"# a stable obstacle point in the world coordinate system\n"
"# position defined above is the obstacle bounding box ground center\n"
"cyber_common_msgs/Point3D anchor_point\n"
"BBox2D bbox2d\n"
"\n"
"\n"
"ObstacleSubType sub_type  # obstacle sub_type\n"
"\n"
"SensorMeasurement[] measurements  # sensor measurements\n"
"\n"
"# orthogonal distance between obstacle lowest point and ground plane\n"
"float64 height_above_ground\n"
"\n"
"# position covariance which is a row-majored 3x3 matrix\n"
"float64[9] position_covariance\n"
"# velocity covariance which is a row-majored 3x3 matrix\n"
"float64[9] velocity_covariance\n"
"# acceleration covariance which is a row-majored 3x3 matrix\n"
"float64[9] acceleration_covariance\n"
"\n"
"# lights of vehicles\n"
"LightStatus light_status\n"
"\n"
"SourceType source\n"
"V2XType v2x_info\n"
"================================================================================\n"
"MSG: cyber_common_msgs/Point3D\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/ObstacleType\n"
"uint8  UNKNOWN = 0\n"
"uint8  UNKNOWN_MOVABLE = 1\n"
"uint8  UNKNOWN_UNMOVABLE = 2\n"
"uint8  PEDESTRIAN = 3  # Pedestrian, usually determined by moving behavior.\n"
"uint8  BICYCLE = 4     # bike, motor bike\n"
"uint8  VEHICLE = 5     # Passenger car or truck.\n"
"\n"
"uint8 type\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/BBox2D\n"
"float64 xmin  # in pixels.\n"
"float64 ymin  # in pixels.\n"
"float64 xmax  # in pixels.\n"
"float64 ymax  # in pixels.\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/ObstacleSubType\n"
"uint8  UNKNOWN = 0\n"
"uint8  UNKNOWN_MOVABLE = 1\n"
"uint8  UNKNOWN_UNMOVABLE = 2\n"
"uint8  CAR = 3\n"
"uint8  VAN = 4\n"
"uint8  TRUCK = 5\n"
"uint8  BUS = 6\n"
"uint8  CYCLIST = 7\n"
"uint8  MOTORCYCLIST = 8\n"
"uint8  TRICYCLIST = 9\n"
"uint8  PEDESTRIAN = 10\n"
"uint8  TRAFFICCONE = 11\n"
"\n"
"uint8 type\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/SensorMeasurement\n"
"string sensor_id\n"
"int32 id\n"
"\n"
"cyber_common_msgs/Point3D position\n"
"float64 theta\n"
"float64 length\n"
"float64 width\n"
"float64 height\n"
"\n"
"cyber_common_msgs/Point3D velocity\n"
"\n"
"ObstacleType type\n"
"ObstacleSubType sub_type\n"
"float64 timestamp\n"
"BBox2D box  # only for camera measurements\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/LightStatus\n"
"float64 brake_visible\n"
"float64 brake_switch_on\n"
"float64 left_turn_visible\n"
"float64 left_turn_switch_on\n"
"float64 right_turn_visible\n"
"float64 right_turn_switch_on\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/SourceType\n"
"uint8  HOST_VEHICLE = 0\n"
"uint8  V2X = 1\n"
"\n"
"uint8 type = 0\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/V2XType\n"
"uint8  NONE = 0\n"
"uint8  ZOMBIES_CAR = 1\n"
"uint8  BLIND_ZONE = 2\n"
"\n"
"uint8[] types\n"
"================================================================================\n"
"MSG: cyber_common_msgs/Header\n"
"float64 timestamp_sec\n"
"\n"
"# Module name.\n"
"string module_name\n"
"\n"
"# Sequence number for each message. Each module maintains its own counter for\n"
"# sequence_num, always starting from 1 on boot.\n"
"uint32 sequence_num\n"
"\n"
"# Lidar Sensor timestamp for nano-second.\n"
"uint64 lidar_timestamp\n"
"\n"
"# Camera Sensor timestamp for nano-second.\n"
"uint64 camera_timestamp\n"
"\n"
"# Radar Sensor timestamp for nano-second.\n"
"uint64 radar_timestamp\n"
"\n"
"# data version\n"
"uint32 version\n"
"\n"
"StatusPb status\n"
"\n"
"string frame_id\n"
"================================================================================\n"
"MSG: cyber_common_msgs/StatusPb\n"
"ErrorCode error_code\n"
"string msg\n"
"================================================================================\n"
"MSG: cyber_common_msgs/ErrorCode\n"
"# No error, returns on success.\n"
"uint16  OK = 0\n"
"\n"
"# Control module error codes start from here.\n"
"uint16  CONTROL_ERROR = 1000\n"
"uint16  CONTROL_INIT_ERROR = 1001\n"
"uint16  CONTROL_COMPUTE_ERROR = 1002\n"
"uint16  CONTROL_ESTOP_ERROR = 1003\n"
"uint16  PERFECT_CONTROL_ERROR = 1004\n"
"\n"
"# Canbus module error codes start from here.\n"
"uint16  CANBUS_ERROR = 2000\n"
"uint16  CAN_CLIENT_ERROR_BASE = 2100\n"
"uint16  CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED = 2101\n"
"uint16  CAN_CLIENT_ERROR_FRAME_NUM = 2102\n"
"uint16  CAN_CLIENT_ERROR_SEND_FAILED = 2103\n"
"uint16  CAN_CLIENT_ERROR_RECV_FAILED = 2104\n"
"\n"
"# Localization module error codes start from here.\n"
"uint16  LOCALIZATION_ERROR = 3000\n"
"uint16  LOCALIZATION_ERROR_MSG = 3100\n"
"uint16  LOCALIZATION_ERROR_LIDAR = 3200\n"
"uint16  LOCALIZATION_ERROR_INTEG = 3300\n"
"uint16  LOCALIZATION_ERROR_GNSS = 3400\n"
"\n"
"# Perception module error codes start from here.\n"
"uint16  PERCEPTION_ERROR = 4000\n"
"uint16  PERCEPTION_ERROR_TF = 4001\n"
"uint16  PERCEPTION_ERROR_PROCESS = 4002\n"
"uint16  PERCEPTION_FATAL = 4003\n"
"uint16  PERCEPTION_ERROR_NONE = 4004\n"
"uint16  PERCEPTION_ERROR_UNKNOWN = 4005\n"
"\n"
"# Prediction module error codes start from here.\n"
"uint16  PREDICTION_ERROR = 5000\n"
"\n"
"# Planning module error codes start from here\n"
"uint16  PLANNING_ERROR = 6000\n"
"uint16  PLANNING_ERROR_NOT_READY = 6001\n"
"\n"
"# HDMap module error codes start from here\n"
"uint16  HDMAP_DATA_ERROR = 7000\n"
"\n"
"# Routing module error codes\n"
"uint16  ROUTING_ERROR = 8000\n"
"uint16  ROUTING_ERROR_REQUEST = 8001\n"
"uint16  ROUTING_ERROR_RESPONSE = 8002\n"
"uint16  ROUTING_ERROR_NOT_READY = 8003\n"
"\n"
"# Indicates an input has been exhausted.\n"
"uint16  END_OF_INPUT = 9000\n"
"\n"
"# HTTP request error codes.\n"
"uint16  HTTP_LOGIC_ERROR = 10000\n"
"uint16  HTTP_RUNTIME_ERROR = 10001\n"
"\n"
"# Relative Map error codes.\n"
"uint16  RELATIVE_MAP_ERROR = 11000  # general relative map error code\n"
"uint16  RELATIVE_MAP_NOT_READY = 11001\n"
"\n"
"# Driver error codes.\n"
"uint16  DRIVER_ERROR_GNSS = 12000\n"
"uint16  DRIVER_ERROR_VELODYNE = 13000\n"
"\n"
"# Storytelling error codes.\n"
"uint16  STORYTELLING_ERROR = 14000\n"
"\n"
"uint16 code\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/LaneMarkers\n"
"LaneMarker left_lane_marker\n"
"LaneMarker right_lane_marker\n"
"LaneMarker[] next_left_lane_marker\n"
"LaneMarker[] next_right_lane_marker\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/LaneMarker\n"
"LaneBoundaryType lane_type\n"
"\n"
"float64 quality  # range = [0,1]; 1 = the best quality\n"
"int32 model_degree\n"
"\n"
"# equation X = c3 * Z^3 + c2 * Z^2 + c1 * Z + c0\n"
"float64 c0_position\n"
"float64 c1_heading_angle\n"
"float64 c2_curvature\n"
"float64 c3_curvature_derivative\n"
"float64 view_range\n"
"float64 longitude_start\n"
"float64 longitude_end\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/LaneBoundaryType\n"
"uint8  UNKNOWN = 0\n"
"uint8  DOTTED_YELLOW = 1\n"
"uint8  DOTTED_WHITE = 2\n"
"uint8  SOLID_YELLOW = 3\n"
"uint8  SOLID_WHITE = 4\n"
"uint8  DOUBLE_YELLOW = 5\n"
"uint8  CURB = 6\n"
"\n"
"# Offset relative to the starting point of boundary\n"
"float64 s\n"
"# support multiple types\n"
"uint8[] types\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/CIPVInfo\n"
"int32 cipv_id\n"
"int32 potential_cipv_id\n"
;
  }

  static const char* value(const ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.perception_obstacle);
      stream.next(m.cyber_header);
      stream.next(m.error_code);
      stream.next(m.lane_marker);
      stream.next(m.cipv_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PerceptionObstacles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cyber_perception_msgs::PerceptionObstacles_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "perception_obstacle[]" << std::endl;
    for (size_t i = 0; i < v.perception_obstacle.size(); ++i)
    {
      s << indent << "  perception_obstacle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.perception_obstacle[i]);
    }
    s << indent << "cyber_header: ";
    s << std::endl;
    Printer< ::cyber_common_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.cyber_header);
    s << indent << "error_code: ";
    s << std::endl;
    Printer< ::cyber_common_msgs::ErrorCode_<ContainerAllocator> >::stream(s, indent + "  ", v.error_code);
    s << indent << "lane_marker: ";
    s << std::endl;
    Printer< ::cyber_perception_msgs::LaneMarkers_<ContainerAllocator> >::stream(s, indent + "  ", v.lane_marker);
    s << indent << "cipv_info: ";
    s << std::endl;
    Printer< ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.cipv_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CYBER_PERCEPTION_MSGS_MESSAGE_PERCEPTIONOBSTACLES_H
