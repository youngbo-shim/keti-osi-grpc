// Generated by gencpp from file cyber_perception_msgs/LaneBoundaryType.msg
// DO NOT EDIT!


#ifndef CYBER_PERCEPTION_MSGS_MESSAGE_LANEBOUNDARYTYPE_H
#define CYBER_PERCEPTION_MSGS_MESSAGE_LANEBOUNDARYTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cyber_perception_msgs
{
template <class ContainerAllocator>
struct LaneBoundaryType_
{
  typedef LaneBoundaryType_<ContainerAllocator> Type;

  LaneBoundaryType_()
    : s(0.0)
    , types()  {
    }
  LaneBoundaryType_(const ContainerAllocator& _alloc)
    : s(0.0)
    , types(_alloc)  {
  (void)_alloc;
    }



   typedef double _s_type;
  _s_type s;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _types_type;
  _types_type types;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(DOTTED_YELLOW)
  #undef DOTTED_YELLOW
#endif
#if defined(_WIN32) && defined(DOTTED_WHITE)
  #undef DOTTED_WHITE
#endif
#if defined(_WIN32) && defined(SOLID_YELLOW)
  #undef SOLID_YELLOW
#endif
#if defined(_WIN32) && defined(SOLID_WHITE)
  #undef SOLID_WHITE
#endif
#if defined(_WIN32) && defined(DOUBLE_YELLOW)
  #undef DOUBLE_YELLOW
#endif
#if defined(_WIN32) && defined(CURB)
  #undef CURB
#endif

  enum {
    UNKNOWN = 0u,
    DOTTED_YELLOW = 1u,
    DOTTED_WHITE = 2u,
    SOLID_YELLOW = 3u,
    SOLID_WHITE = 4u,
    DOUBLE_YELLOW = 5u,
    CURB = 6u,
  };


  typedef boost::shared_ptr< ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> const> ConstPtr;

}; // struct LaneBoundaryType_

typedef ::cyber_perception_msgs::LaneBoundaryType_<std::allocator<void> > LaneBoundaryType;

typedef boost::shared_ptr< ::cyber_perception_msgs::LaneBoundaryType > LaneBoundaryTypePtr;
typedef boost::shared_ptr< ::cyber_perception_msgs::LaneBoundaryType const> LaneBoundaryTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator2> & rhs)
{
  return lhs.s == rhs.s &&
    lhs.types == rhs.types;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cyber_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8004a5b8d559cff3d297cae1407b29c";
  }

  static const char* value(const ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8004a5b8d559cffULL;
  static const uint64_t static_value2 = 0x3d297cae1407b29cULL;
};

template<class ContainerAllocator>
struct DataType< ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cyber_perception_msgs/LaneBoundaryType";
  }

  static const char* value(const ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8  UNKNOWN = 0\n"
"uint8  DOTTED_YELLOW = 1\n"
"uint8  DOTTED_WHITE = 2\n"
"uint8  SOLID_YELLOW = 3\n"
"uint8  SOLID_WHITE = 4\n"
"uint8  DOUBLE_YELLOW = 5\n"
"uint8  CURB = 6\n"
"\n"
"# Offset relative to the starting point of boundary\n"
"float64 s\n"
"# support multiple types\n"
"uint8[] types\n"
;
  }

  static const char* value(const ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s);
      stream.next(m.types);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneBoundaryType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator>& v)
  {
    s << indent << "s: ";
    Printer<double>::stream(s, indent + "  ", v.s);
    s << indent << "types[]" << std::endl;
    for (size_t i = 0; i < v.types.size(); ++i)
    {
      s << indent << "  types[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.types[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CYBER_PERCEPTION_MSGS_MESSAGE_LANEBOUNDARYTYPE_H
