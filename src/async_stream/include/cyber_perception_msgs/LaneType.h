// Generated by gencpp from file cyber_perception_msgs/LaneType.msg
// DO NOT EDIT!


#ifndef CYBER_PERCEPTION_MSGS_MESSAGE_LANETYPE_H
#define CYBER_PERCEPTION_MSGS_MESSAGE_LANETYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cyber_perception_msgs
{
template <class ContainerAllocator>
struct LaneType_
{
  typedef LaneType_<ContainerAllocator> Type;

  LaneType_()
    : type(0)  {
    }
  LaneType_(const ContainerAllocator& _alloc)
    : type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(CITY_DRIVING)
  #undef CITY_DRIVING
#endif
#if defined(_WIN32) && defined(BIKING)
  #undef BIKING
#endif
#if defined(_WIN32) && defined(SIDEWALK)
  #undef SIDEWALK
#endif
#if defined(_WIN32) && defined(PARKING)
  #undef PARKING
#endif
#if defined(_WIN32) && defined(SHOULDER)
  #undef SHOULDER
#endif

  enum {
    NONE = 1u,
    CITY_DRIVING = 2u,
    BIKING = 3u,
    SIDEWALK = 4u,
    PARKING = 5u,
    SHOULDER = 6u,
  };


  typedef boost::shared_ptr< ::cyber_perception_msgs::LaneType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cyber_perception_msgs::LaneType_<ContainerAllocator> const> ConstPtr;

}; // struct LaneType_

typedef ::cyber_perception_msgs::LaneType_<std::allocator<void> > LaneType;

typedef boost::shared_ptr< ::cyber_perception_msgs::LaneType > LaneTypePtr;
typedef boost::shared_ptr< ::cyber_perception_msgs::LaneType const> LaneTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cyber_perception_msgs::LaneType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cyber_perception_msgs::LaneType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cyber_perception_msgs::LaneType_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::LaneType_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cyber_perception_msgs::LaneType_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::LaneType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cyber_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::LaneType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::LaneType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::LaneType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::LaneType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::LaneType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::LaneType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cyber_perception_msgs::LaneType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e19941780645c92a1d30bfb915696af8";
  }

  static const char* value(const ::cyber_perception_msgs::LaneType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe19941780645c92aULL;
  static const uint64_t static_value2 = 0x1d30bfb915696af8ULL;
};

template<class ContainerAllocator>
struct DataType< ::cyber_perception_msgs::LaneType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cyber_perception_msgs/LaneType";
  }

  static const char* value(const ::cyber_perception_msgs::LaneType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cyber_perception_msgs::LaneType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8  NONE = 1\n"
"uint8  CITY_DRIVING = 2\n"
"uint8  BIKING = 3\n"
"uint8  SIDEWALK = 4\n"
"uint8  PARKING = 5\n"
"uint8  SHOULDER = 6\n"
"\n"
"uint8 type\n"
;
  }

  static const char* value(const ::cyber_perception_msgs::LaneType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cyber_perception_msgs::LaneType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cyber_perception_msgs::LaneType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cyber_perception_msgs::LaneType_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CYBER_PERCEPTION_MSGS_MESSAGE_LANETYPE_H
