// Generated by gencpp from file cyber_perception_msgs/PerceptionObstacle.msg
// DO NOT EDIT!


#ifndef CYBER_PERCEPTION_MSGS_MESSAGE_PERCEPTIONOBSTACLE_H
#define CYBER_PERCEPTION_MSGS_MESSAGE_PERCEPTIONOBSTACLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cyber_common_msgs/Point3D.h>
#include <cyber_common_msgs/Point3D.h>
#include <cyber_common_msgs/Point3D.h>
#include <cyber_perception_msgs/ObstacleType.h>
#include <cyber_common_msgs/Point3D.h>
#include <cyber_common_msgs/Point3D.h>
#include <cyber_perception_msgs/BBox2D.h>
#include <cyber_perception_msgs/ObstacleSubType.h>
#include <cyber_perception_msgs/SensorMeasurement.h>
#include <cyber_perception_msgs/LightStatus.h>
#include <cyber_perception_msgs/SourceType.h>
#include <cyber_perception_msgs/V2XType.h>

namespace cyber_perception_msgs
{
template <class ContainerAllocator>
struct PerceptionObstacle_
{
  typedef PerceptionObstacle_<ContainerAllocator> Type;

  PerceptionObstacle_()
    : id(0)
    , position()
    , theta(0.0)
    , velocity()
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , polygon_point()
    , tracking_time(0.0)
    , type()
    , timestamp(0.0)
    , acceleration()
    , anchor_point()
    , bbox2d()
    , sub_type()
    , measurements()
    , height_above_ground(0.0)
    , position_covariance()
    , velocity_covariance()
    , acceleration_covariance()
    , light_status()
    , source()
    , v2x_info()  {
      position_covariance.assign(0.0);

      velocity_covariance.assign(0.0);

      acceleration_covariance.assign(0.0);
  }
  PerceptionObstacle_(const ContainerAllocator& _alloc)
    : id(0)
    , position(_alloc)
    , theta(0.0)
    , velocity(_alloc)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , polygon_point(_alloc)
    , tracking_time(0.0)
    , type(_alloc)
    , timestamp(0.0)
    , acceleration(_alloc)
    , anchor_point(_alloc)
    , bbox2d(_alloc)
    , sub_type(_alloc)
    , measurements(_alloc)
    , height_above_ground(0.0)
    , position_covariance()
    , velocity_covariance()
    , acceleration_covariance()
    , light_status(_alloc)
    , source(_alloc)
    , v2x_info(_alloc)  {
  (void)_alloc;
      position_covariance.assign(0.0);

      velocity_covariance.assign(0.0);

      acceleration_covariance.assign(0.0);
  }



   typedef int32_t _id_type;
  _id_type id;

   typedef  ::cyber_common_msgs::Point3D_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef double _theta_type;
  _theta_type theta;

   typedef  ::cyber_common_msgs::Point3D_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef double _length_type;
  _length_type length;

   typedef double _width_type;
  _width_type width;

   typedef double _height_type;
  _height_type height;

   typedef std::vector< ::cyber_common_msgs::Point3D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cyber_common_msgs::Point3D_<ContainerAllocator> >> _polygon_point_type;
  _polygon_point_type polygon_point;

   typedef double _tracking_time_type;
  _tracking_time_type tracking_time;

   typedef  ::cyber_perception_msgs::ObstacleType_<ContainerAllocator>  _type_type;
  _type_type type;

   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef  ::cyber_common_msgs::Point3D_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::cyber_common_msgs::Point3D_<ContainerAllocator>  _anchor_point_type;
  _anchor_point_type anchor_point;

   typedef  ::cyber_perception_msgs::BBox2D_<ContainerAllocator>  _bbox2d_type;
  _bbox2d_type bbox2d;

   typedef  ::cyber_perception_msgs::ObstacleSubType_<ContainerAllocator>  _sub_type_type;
  _sub_type_type sub_type;

   typedef std::vector< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> >> _measurements_type;
  _measurements_type measurements;

   typedef double _height_above_ground_type;
  _height_above_ground_type height_above_ground;

   typedef boost::array<double, 9>  _position_covariance_type;
  _position_covariance_type position_covariance;

   typedef boost::array<double, 9>  _velocity_covariance_type;
  _velocity_covariance_type velocity_covariance;

   typedef boost::array<double, 9>  _acceleration_covariance_type;
  _acceleration_covariance_type acceleration_covariance;

   typedef  ::cyber_perception_msgs::LightStatus_<ContainerAllocator>  _light_status_type;
  _light_status_type light_status;

   typedef  ::cyber_perception_msgs::SourceType_<ContainerAllocator>  _source_type;
  _source_type source;

   typedef  ::cyber_perception_msgs::V2XType_<ContainerAllocator>  _v2x_info_type;
  _v2x_info_type v2x_info;





  typedef boost::shared_ptr< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct PerceptionObstacle_

typedef ::cyber_perception_msgs::PerceptionObstacle_<std::allocator<void> > PerceptionObstacle;

typedef boost::shared_ptr< ::cyber_perception_msgs::PerceptionObstacle > PerceptionObstaclePtr;
typedef boost::shared_ptr< ::cyber_perception_msgs::PerceptionObstacle const> PerceptionObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.position == rhs.position &&
    lhs.theta == rhs.theta &&
    lhs.velocity == rhs.velocity &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.polygon_point == rhs.polygon_point &&
    lhs.tracking_time == rhs.tracking_time &&
    lhs.type == rhs.type &&
    lhs.timestamp == rhs.timestamp &&
    lhs.acceleration == rhs.acceleration &&
    lhs.anchor_point == rhs.anchor_point &&
    lhs.bbox2d == rhs.bbox2d &&
    lhs.sub_type == rhs.sub_type &&
    lhs.measurements == rhs.measurements &&
    lhs.height_above_ground == rhs.height_above_ground &&
    lhs.position_covariance == rhs.position_covariance &&
    lhs.velocity_covariance == rhs.velocity_covariance &&
    lhs.acceleration_covariance == rhs.acceleration_covariance &&
    lhs.light_status == rhs.light_status &&
    lhs.source == rhs.source &&
    lhs.v2x_info == rhs.v2x_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cyber_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0572a6c71a90f1dd4e9a7ace09733cf1";
  }

  static const char* value(const ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0572a6c71a90f1ddULL;
  static const uint64_t static_value2 = 0x4e9a7ace09733cf1ULL;
};

template<class ContainerAllocator>
struct DataType< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cyber_perception_msgs/PerceptionObstacle";
  }

  static const char* value(const ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id  # obstacle ID.\n"
"\n"
"# obstacle position in the world coordinate system.\n"
"cyber_common_msgs/Point3D position\n"
"\n"
"float64 theta  # heading in the world coordinate system.\n"
"\n"
"cyber_common_msgs/Point3D velocity  # obstacle velocity.\n"
"\n"
"# Size of obstacle bounding box.\n"
"float64 length  # obstacle length.\n"
"float64 width   # obstacle width.\n"
"float64 height  # obstacle height.\n"
"\n"
"cyber_common_msgs/Point3D[] polygon_point  # obstacle corner points.\n"
"\n"
"# duration of an obstacle since detection in s.\n"
"float64 tracking_time\n"
"\n"
"ObstacleType type\n"
"\n"
"float64 timestamp  # GPS time in seconds.\n"
"\n"
"# The following fields are new added in Apollo 4.0\n"
"cyber_common_msgs/Point3D acceleration  # obstacle acceleration\n"
"\n"
"# a stable obstacle point in the world coordinate system\n"
"# position defined above is the obstacle bounding box ground center\n"
"cyber_common_msgs/Point3D anchor_point\n"
"BBox2D bbox2d\n"
"\n"
"\n"
"ObstacleSubType sub_type  # obstacle sub_type\n"
"\n"
"SensorMeasurement[] measurements  # sensor measurements\n"
"\n"
"# orthogonal distance between obstacle lowest point and ground plane\n"
"float64 height_above_ground\n"
"\n"
"# position covariance which is a row-majored 3x3 matrix\n"
"float64[9] position_covariance\n"
"# velocity covariance which is a row-majored 3x3 matrix\n"
"float64[9] velocity_covariance\n"
"# acceleration covariance which is a row-majored 3x3 matrix\n"
"float64[9] acceleration_covariance\n"
"\n"
"# lights of vehicles\n"
"LightStatus light_status\n"
"\n"
"SourceType source\n"
"V2XType v2x_info\n"
"================================================================================\n"
"MSG: cyber_common_msgs/Point3D\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/ObstacleType\n"
"uint8  UNKNOWN = 0\n"
"uint8  UNKNOWN_MOVABLE = 1\n"
"uint8  UNKNOWN_UNMOVABLE = 2\n"
"uint8  PEDESTRIAN = 3  # Pedestrian, usually determined by moving behavior.\n"
"uint8  BICYCLE = 4     # bike, motor bike\n"
"uint8  VEHICLE = 5     # Passenger car or truck.\n"
"\n"
"uint8 type\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/BBox2D\n"
"float64 xmin  # in pixels.\n"
"float64 ymin  # in pixels.\n"
"float64 xmax  # in pixels.\n"
"float64 ymax  # in pixels.\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/ObstacleSubType\n"
"uint8  UNKNOWN = 0\n"
"uint8  UNKNOWN_MOVABLE = 1\n"
"uint8  UNKNOWN_UNMOVABLE = 2\n"
"uint8  CAR = 3\n"
"uint8  VAN = 4\n"
"uint8  TRUCK = 5\n"
"uint8  BUS = 6\n"
"uint8  CYCLIST = 7\n"
"uint8  MOTORCYCLIST = 8\n"
"uint8  TRICYCLIST = 9\n"
"uint8  PEDESTRIAN = 10\n"
"uint8  TRAFFICCONE = 11\n"
"\n"
"uint8 type\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/SensorMeasurement\n"
"string sensor_id\n"
"int32 id\n"
"\n"
"cyber_common_msgs/Point3D position\n"
"float64 theta\n"
"float64 length\n"
"float64 width\n"
"float64 height\n"
"\n"
"cyber_common_msgs/Point3D velocity\n"
"\n"
"ObstacleType type\n"
"ObstacleSubType sub_type\n"
"float64 timestamp\n"
"BBox2D box  # only for camera measurements\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/LightStatus\n"
"float64 brake_visible\n"
"float64 brake_switch_on\n"
"float64 left_turn_visible\n"
"float64 left_turn_switch_on\n"
"float64 right_turn_visible\n"
"float64 right_turn_switch_on\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/SourceType\n"
"uint8  HOST_VEHICLE = 0\n"
"uint8  V2X = 1\n"
"\n"
"uint8 type = 0\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/V2XType\n"
"uint8  NONE = 0\n"
"uint8  ZOMBIES_CAR = 1\n"
"uint8  BLIND_ZONE = 2\n"
"\n"
"uint8[] types\n"
;
  }

  static const char* value(const ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.theta);
      stream.next(m.velocity);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.polygon_point);
      stream.next(m.tracking_time);
      stream.next(m.type);
      stream.next(m.timestamp);
      stream.next(m.acceleration);
      stream.next(m.anchor_point);
      stream.next(m.bbox2d);
      stream.next(m.sub_type);
      stream.next(m.measurements);
      stream.next(m.height_above_ground);
      stream.next(m.position_covariance);
      stream.next(m.velocity_covariance);
      stream.next(m.acceleration_covariance);
      stream.next(m.light_status);
      stream.next(m.source);
      stream.next(m.v2x_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PerceptionObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cyber_perception_msgs::PerceptionObstacle_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::cyber_common_msgs::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::cyber_common_msgs::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "polygon_point[]" << std::endl;
    for (size_t i = 0; i < v.polygon_point.size(); ++i)
    {
      s << indent << "  polygon_point[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cyber_common_msgs::Point3D_<ContainerAllocator> >::stream(s, indent + "    ", v.polygon_point[i]);
    }
    s << indent << "tracking_time: ";
    Printer<double>::stream(s, indent + "  ", v.tracking_time);
    s << indent << "type: ";
    s << std::endl;
    Printer< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::cyber_common_msgs::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "anchor_point: ";
    s << std::endl;
    Printer< ::cyber_common_msgs::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.anchor_point);
    s << indent << "bbox2d: ";
    s << std::endl;
    Printer< ::cyber_perception_msgs::BBox2D_<ContainerAllocator> >::stream(s, indent + "  ", v.bbox2d);
    s << indent << "sub_type: ";
    s << std::endl;
    Printer< ::cyber_perception_msgs::ObstacleSubType_<ContainerAllocator> >::stream(s, indent + "  ", v.sub_type);
    s << indent << "measurements[]" << std::endl;
    for (size_t i = 0; i < v.measurements.size(); ++i)
    {
      s << indent << "  measurements[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> >::stream(s, indent + "    ", v.measurements[i]);
    }
    s << indent << "height_above_ground: ";
    Printer<double>::stream(s, indent + "  ", v.height_above_ground);
    s << indent << "position_covariance[]" << std::endl;
    for (size_t i = 0; i < v.position_covariance.size(); ++i)
    {
      s << indent << "  position_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_covariance[i]);
    }
    s << indent << "velocity_covariance[]" << std::endl;
    for (size_t i = 0; i < v.velocity_covariance.size(); ++i)
    {
      s << indent << "  velocity_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity_covariance[i]);
    }
    s << indent << "acceleration_covariance[]" << std::endl;
    for (size_t i = 0; i < v.acceleration_covariance.size(); ++i)
    {
      s << indent << "  acceleration_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acceleration_covariance[i]);
    }
    s << indent << "light_status: ";
    s << std::endl;
    Printer< ::cyber_perception_msgs::LightStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.light_status);
    s << indent << "source: ";
    s << std::endl;
    Printer< ::cyber_perception_msgs::SourceType_<ContainerAllocator> >::stream(s, indent + "  ", v.source);
    s << indent << "v2x_info: ";
    s << std::endl;
    Printer< ::cyber_perception_msgs::V2XType_<ContainerAllocator> >::stream(s, indent + "  ", v.v2x_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CYBER_PERCEPTION_MSGS_MESSAGE_PERCEPTIONOBSTACLE_H
