// Generated by gencpp from file cyber_perception_msgs/SourceType.msg
// DO NOT EDIT!


#ifndef CYBER_PERCEPTION_MSGS_MESSAGE_SOURCETYPE_H
#define CYBER_PERCEPTION_MSGS_MESSAGE_SOURCETYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cyber_perception_msgs
{
template <class ContainerAllocator>
struct SourceType_
{
  typedef SourceType_<ContainerAllocator> Type;

  SourceType_()
    {
    }
  SourceType_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(HOST_VEHICLE)
  #undef HOST_VEHICLE
#endif
#if defined(_WIN32) && defined(V2X)
  #undef V2X
#endif
#if defined(_WIN32) && defined(type)
  #undef type
#endif

  enum {
    HOST_VEHICLE = 0u,
    V2X = 1u,
    type = 0u,
  };


  typedef boost::shared_ptr< ::cyber_perception_msgs::SourceType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cyber_perception_msgs::SourceType_<ContainerAllocator> const> ConstPtr;

}; // struct SourceType_

typedef ::cyber_perception_msgs::SourceType_<std::allocator<void> > SourceType;

typedef boost::shared_ptr< ::cyber_perception_msgs::SourceType > SourceTypePtr;
typedef boost::shared_ptr< ::cyber_perception_msgs::SourceType const> SourceTypeConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cyber_perception_msgs::SourceType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cyber_perception_msgs::SourceType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace cyber_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::SourceType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::SourceType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::SourceType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::SourceType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::SourceType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::SourceType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cyber_perception_msgs::SourceType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "630d342c4e25215e7d8e76add983aec3";
  }

  static const char* value(const ::cyber_perception_msgs::SourceType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x630d342c4e25215eULL;
  static const uint64_t static_value2 = 0x7d8e76add983aec3ULL;
};

template<class ContainerAllocator>
struct DataType< ::cyber_perception_msgs::SourceType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cyber_perception_msgs/SourceType";
  }

  static const char* value(const ::cyber_perception_msgs::SourceType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cyber_perception_msgs::SourceType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8  HOST_VEHICLE = 0\n"
"uint8  V2X = 1\n"
"\n"
"uint8 type = 0\n"
;
  }

  static const char* value(const ::cyber_perception_msgs::SourceType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cyber_perception_msgs::SourceType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SourceType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cyber_perception_msgs::SourceType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::cyber_perception_msgs::SourceType_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // CYBER_PERCEPTION_MSGS_MESSAGE_SOURCETYPE_H
