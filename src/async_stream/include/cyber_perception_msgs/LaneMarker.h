// Generated by gencpp from file cyber_perception_msgs/LaneMarker.msg
// DO NOT EDIT!


#ifndef CYBER_PERCEPTION_MSGS_MESSAGE_LANEMARKER_H
#define CYBER_PERCEPTION_MSGS_MESSAGE_LANEMARKER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cyber_perception_msgs/LaneBoundaryType.h>

namespace cyber_perception_msgs
{
template <class ContainerAllocator>
struct LaneMarker_
{
  typedef LaneMarker_<ContainerAllocator> Type;

  LaneMarker_()
    : lane_type()
    , quality(0.0)
    , model_degree(0)
    , c0_position(0.0)
    , c1_heading_angle(0.0)
    , c2_curvature(0.0)
    , c3_curvature_derivative(0.0)
    , view_range(0.0)
    , longitude_start(0.0)
    , longitude_end(0.0)  {
    }
  LaneMarker_(const ContainerAllocator& _alloc)
    : lane_type(_alloc)
    , quality(0.0)
    , model_degree(0)
    , c0_position(0.0)
    , c1_heading_angle(0.0)
    , c2_curvature(0.0)
    , c3_curvature_derivative(0.0)
    , view_range(0.0)
    , longitude_start(0.0)
    , longitude_end(0.0)  {
  (void)_alloc;
    }



   typedef  ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator>  _lane_type_type;
  _lane_type_type lane_type;

   typedef double _quality_type;
  _quality_type quality;

   typedef int32_t _model_degree_type;
  _model_degree_type model_degree;

   typedef double _c0_position_type;
  _c0_position_type c0_position;

   typedef double _c1_heading_angle_type;
  _c1_heading_angle_type c1_heading_angle;

   typedef double _c2_curvature_type;
  _c2_curvature_type c2_curvature;

   typedef double _c3_curvature_derivative_type;
  _c3_curvature_derivative_type c3_curvature_derivative;

   typedef double _view_range_type;
  _view_range_type view_range;

   typedef double _longitude_start_type;
  _longitude_start_type longitude_start;

   typedef double _longitude_end_type;
  _longitude_end_type longitude_end;





  typedef boost::shared_ptr< ::cyber_perception_msgs::LaneMarker_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cyber_perception_msgs::LaneMarker_<ContainerAllocator> const> ConstPtr;

}; // struct LaneMarker_

typedef ::cyber_perception_msgs::LaneMarker_<std::allocator<void> > LaneMarker;

typedef boost::shared_ptr< ::cyber_perception_msgs::LaneMarker > LaneMarkerPtr;
typedef boost::shared_ptr< ::cyber_perception_msgs::LaneMarker const> LaneMarkerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cyber_perception_msgs::LaneMarker_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cyber_perception_msgs::LaneMarker_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cyber_perception_msgs::LaneMarker_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::LaneMarker_<ContainerAllocator2> & rhs)
{
  return lhs.lane_type == rhs.lane_type &&
    lhs.quality == rhs.quality &&
    lhs.model_degree == rhs.model_degree &&
    lhs.c0_position == rhs.c0_position &&
    lhs.c1_heading_angle == rhs.c1_heading_angle &&
    lhs.c2_curvature == rhs.c2_curvature &&
    lhs.c3_curvature_derivative == rhs.c3_curvature_derivative &&
    lhs.view_range == rhs.view_range &&
    lhs.longitude_start == rhs.longitude_start &&
    lhs.longitude_end == rhs.longitude_end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cyber_perception_msgs::LaneMarker_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::LaneMarker_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cyber_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::LaneMarker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::LaneMarker_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::LaneMarker_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::LaneMarker_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::LaneMarker_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::LaneMarker_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cyber_perception_msgs::LaneMarker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13c6e37bcb69e8c5d1b6d41625c89085";
  }

  static const char* value(const ::cyber_perception_msgs::LaneMarker_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13c6e37bcb69e8c5ULL;
  static const uint64_t static_value2 = 0xd1b6d41625c89085ULL;
};

template<class ContainerAllocator>
struct DataType< ::cyber_perception_msgs::LaneMarker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cyber_perception_msgs/LaneMarker";
  }

  static const char* value(const ::cyber_perception_msgs::LaneMarker_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cyber_perception_msgs::LaneMarker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LaneBoundaryType lane_type\n"
"\n"
"float64 quality  # range = [0,1]; 1 = the best quality\n"
"int32 model_degree\n"
"\n"
"# equation X = c3 * Z^3 + c2 * Z^2 + c1 * Z + c0\n"
"float64 c0_position\n"
"float64 c1_heading_angle\n"
"float64 c2_curvature\n"
"float64 c3_curvature_derivative\n"
"float64 view_range\n"
"float64 longitude_start\n"
"float64 longitude_end\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/LaneBoundaryType\n"
"uint8  UNKNOWN = 0\n"
"uint8  DOTTED_YELLOW = 1\n"
"uint8  DOTTED_WHITE = 2\n"
"uint8  SOLID_YELLOW = 3\n"
"uint8  SOLID_WHITE = 4\n"
"uint8  DOUBLE_YELLOW = 5\n"
"uint8  CURB = 6\n"
"\n"
"# Offset relative to the starting point of boundary\n"
"float64 s\n"
"# support multiple types\n"
"uint8[] types\n"
;
  }

  static const char* value(const ::cyber_perception_msgs::LaneMarker_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cyber_perception_msgs::LaneMarker_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_type);
      stream.next(m.quality);
      stream.next(m.model_degree);
      stream.next(m.c0_position);
      stream.next(m.c1_heading_angle);
      stream.next(m.c2_curvature);
      stream.next(m.c3_curvature_derivative);
      stream.next(m.view_range);
      stream.next(m.longitude_start);
      stream.next(m.longitude_end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneMarker_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cyber_perception_msgs::LaneMarker_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cyber_perception_msgs::LaneMarker_<ContainerAllocator>& v)
  {
    s << indent << "lane_type: ";
    s << std::endl;
    Printer< ::cyber_perception_msgs::LaneBoundaryType_<ContainerAllocator> >::stream(s, indent + "  ", v.lane_type);
    s << indent << "quality: ";
    Printer<double>::stream(s, indent + "  ", v.quality);
    s << indent << "model_degree: ";
    Printer<int32_t>::stream(s, indent + "  ", v.model_degree);
    s << indent << "c0_position: ";
    Printer<double>::stream(s, indent + "  ", v.c0_position);
    s << indent << "c1_heading_angle: ";
    Printer<double>::stream(s, indent + "  ", v.c1_heading_angle);
    s << indent << "c2_curvature: ";
    Printer<double>::stream(s, indent + "  ", v.c2_curvature);
    s << indent << "c3_curvature_derivative: ";
    Printer<double>::stream(s, indent + "  ", v.c3_curvature_derivative);
    s << indent << "view_range: ";
    Printer<double>::stream(s, indent + "  ", v.view_range);
    s << indent << "longitude_start: ";
    Printer<double>::stream(s, indent + "  ", v.longitude_start);
    s << indent << "longitude_end: ";
    Printer<double>::stream(s, indent + "  ", v.longitude_end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CYBER_PERCEPTION_MSGS_MESSAGE_LANEMARKER_H
