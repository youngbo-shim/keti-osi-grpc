// Generated by gencpp from file cyber_perception_msgs/CIPVInfo.msg
// DO NOT EDIT!


#ifndef CYBER_PERCEPTION_MSGS_MESSAGE_CIPVINFO_H
#define CYBER_PERCEPTION_MSGS_MESSAGE_CIPVINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cyber_perception_msgs
{
template <class ContainerAllocator>
struct CIPVInfo_
{
  typedef CIPVInfo_<ContainerAllocator> Type;

  CIPVInfo_()
    : cipv_id(0)
    , potential_cipv_id(0)  {
    }
  CIPVInfo_(const ContainerAllocator& _alloc)
    : cipv_id(0)
    , potential_cipv_id(0)  {
  (void)_alloc;
    }



   typedef int32_t _cipv_id_type;
  _cipv_id_type cipv_id;

   typedef int32_t _potential_cipv_id_type;
  _potential_cipv_id_type potential_cipv_id;





  typedef boost::shared_ptr< ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> const> ConstPtr;

}; // struct CIPVInfo_

typedef ::cyber_perception_msgs::CIPVInfo_<std::allocator<void> > CIPVInfo;

typedef boost::shared_ptr< ::cyber_perception_msgs::CIPVInfo > CIPVInfoPtr;
typedef boost::shared_ptr< ::cyber_perception_msgs::CIPVInfo const> CIPVInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator2> & rhs)
{
  return lhs.cipv_id == rhs.cipv_id &&
    lhs.potential_cipv_id == rhs.potential_cipv_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cyber_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4b571163f68a68fdf6ec70ae19e2b7b";
  }

  static const char* value(const ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4b571163f68a68fULL;
  static const uint64_t static_value2 = 0xdf6ec70ae19e2b7bULL;
};

template<class ContainerAllocator>
struct DataType< ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cyber_perception_msgs/CIPVInfo";
  }

  static const char* value(const ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 cipv_id\n"
"int32 potential_cipv_id\n"
;
  }

  static const char* value(const ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cipv_id);
      stream.next(m.potential_cipv_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CIPVInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cyber_perception_msgs::CIPVInfo_<ContainerAllocator>& v)
  {
    s << indent << "cipv_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cipv_id);
    s << indent << "potential_cipv_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.potential_cipv_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CYBER_PERCEPTION_MSGS_MESSAGE_CIPVINFO_H
