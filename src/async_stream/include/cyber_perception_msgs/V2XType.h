// Generated by gencpp from file cyber_perception_msgs/V2XType.msg
// DO NOT EDIT!


#ifndef CYBER_PERCEPTION_MSGS_MESSAGE_V2XTYPE_H
#define CYBER_PERCEPTION_MSGS_MESSAGE_V2XTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cyber_perception_msgs
{
template <class ContainerAllocator>
struct V2XType_
{
  typedef V2XType_<ContainerAllocator> Type;

  V2XType_()
    : types()  {
    }
  V2XType_(const ContainerAllocator& _alloc)
    : types(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _types_type;
  _types_type types;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(ZOMBIES_CAR)
  #undef ZOMBIES_CAR
#endif
#if defined(_WIN32) && defined(BLIND_ZONE)
  #undef BLIND_ZONE
#endif

  enum {
    NONE = 0u,
    ZOMBIES_CAR = 1u,
    BLIND_ZONE = 2u,
  };


  typedef boost::shared_ptr< ::cyber_perception_msgs::V2XType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cyber_perception_msgs::V2XType_<ContainerAllocator> const> ConstPtr;

}; // struct V2XType_

typedef ::cyber_perception_msgs::V2XType_<std::allocator<void> > V2XType;

typedef boost::shared_ptr< ::cyber_perception_msgs::V2XType > V2XTypePtr;
typedef boost::shared_ptr< ::cyber_perception_msgs::V2XType const> V2XTypeConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cyber_perception_msgs::V2XType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cyber_perception_msgs::V2XType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cyber_perception_msgs::V2XType_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::V2XType_<ContainerAllocator2> & rhs)
{
  return lhs.types == rhs.types;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cyber_perception_msgs::V2XType_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::V2XType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cyber_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::V2XType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::V2XType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::V2XType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::V2XType_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::V2XType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::V2XType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cyber_perception_msgs::V2XType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e70330d1ac03e27ae94450711e0a8948";
  }

  static const char* value(const ::cyber_perception_msgs::V2XType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe70330d1ac03e27aULL;
  static const uint64_t static_value2 = 0xe94450711e0a8948ULL;
};

template<class ContainerAllocator>
struct DataType< ::cyber_perception_msgs::V2XType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cyber_perception_msgs/V2XType";
  }

  static const char* value(const ::cyber_perception_msgs::V2XType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cyber_perception_msgs::V2XType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8  NONE = 0\n"
"uint8  ZOMBIES_CAR = 1\n"
"uint8  BLIND_ZONE = 2\n"
"\n"
"uint8[] types\n"
;
  }

  static const char* value(const ::cyber_perception_msgs::V2XType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cyber_perception_msgs::V2XType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.types);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct V2XType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cyber_perception_msgs::V2XType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cyber_perception_msgs::V2XType_<ContainerAllocator>& v)
  {
    s << indent << "types[]" << std::endl;
    for (size_t i = 0; i < v.types.size(); ++i)
    {
      s << indent << "  types[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.types[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CYBER_PERCEPTION_MSGS_MESSAGE_V2XTYPE_H
