// Generated by gencpp from file cyber_perception_msgs/ObstacleType.msg
// DO NOT EDIT!


#ifndef CYBER_PERCEPTION_MSGS_MESSAGE_OBSTACLETYPE_H
#define CYBER_PERCEPTION_MSGS_MESSAGE_OBSTACLETYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cyber_perception_msgs
{
template <class ContainerAllocator>
struct ObstacleType_
{
  typedef ObstacleType_<ContainerAllocator> Type;

  ObstacleType_()
    : type(0)  {
    }
  ObstacleType_(const ContainerAllocator& _alloc)
    : type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(UNKNOWN_MOVABLE)
  #undef UNKNOWN_MOVABLE
#endif
#if defined(_WIN32) && defined(UNKNOWN_UNMOVABLE)
  #undef UNKNOWN_UNMOVABLE
#endif
#if defined(_WIN32) && defined(PEDESTRIAN)
  #undef PEDESTRIAN
#endif
#if defined(_WIN32) && defined(BICYCLE)
  #undef BICYCLE
#endif
#if defined(_WIN32) && defined(VEHICLE)
  #undef VEHICLE
#endif

  enum {
    UNKNOWN = 0u,
    UNKNOWN_MOVABLE = 1u,
    UNKNOWN_UNMOVABLE = 2u,
    PEDESTRIAN = 3u,
    BICYCLE = 4u,
    VEHICLE = 5u,
  };


  typedef boost::shared_ptr< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleType_

typedef ::cyber_perception_msgs::ObstacleType_<std::allocator<void> > ObstacleType;

typedef boost::shared_ptr< ::cyber_perception_msgs::ObstacleType > ObstacleTypePtr;
typedef boost::shared_ptr< ::cyber_perception_msgs::ObstacleType const> ObstacleTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cyber_perception_msgs::ObstacleType_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::ObstacleType_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cyber_perception_msgs::ObstacleType_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::ObstacleType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cyber_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a9b3744222de836862ea7d26c1a18aeb";
  }

  static const char* value(const ::cyber_perception_msgs::ObstacleType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa9b3744222de8368ULL;
  static const uint64_t static_value2 = 0x62ea7d26c1a18aebULL;
};

template<class ContainerAllocator>
struct DataType< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cyber_perception_msgs/ObstacleType";
  }

  static const char* value(const ::cyber_perception_msgs::ObstacleType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8  UNKNOWN = 0\n"
"uint8  UNKNOWN_MOVABLE = 1\n"
"uint8  UNKNOWN_UNMOVABLE = 2\n"
"uint8  PEDESTRIAN = 3  # Pedestrian, usually determined by moving behavior.\n"
"uint8  BICYCLE = 4     # bike, motor bike\n"
"uint8  VEHICLE = 5     # Passenger car or truck.\n"
"\n"
"uint8 type\n"
;
  }

  static const char* value(const ::cyber_perception_msgs::ObstacleType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cyber_perception_msgs::ObstacleType_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CYBER_PERCEPTION_MSGS_MESSAGE_OBSTACLETYPE_H
