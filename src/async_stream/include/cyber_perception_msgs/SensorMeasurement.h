// Generated by gencpp from file cyber_perception_msgs/SensorMeasurement.msg
// DO NOT EDIT!


#ifndef CYBER_PERCEPTION_MSGS_MESSAGE_SENSORMEASUREMENT_H
#define CYBER_PERCEPTION_MSGS_MESSAGE_SENSORMEASUREMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cyber_common_msgs/Point3D.h>
#include <cyber_common_msgs/Point3D.h>
#include <cyber_perception_msgs/ObstacleType.h>
#include <cyber_perception_msgs/ObstacleSubType.h>
#include <cyber_perception_msgs/BBox2D.h>

namespace cyber_perception_msgs
{
template <class ContainerAllocator>
struct SensorMeasurement_
{
  typedef SensorMeasurement_<ContainerAllocator> Type;

  SensorMeasurement_()
    : sensor_id()
    , id(0)
    , position()
    , theta(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , velocity()
    , type()
    , sub_type()
    , timestamp(0.0)
    , box()  {
    }
  SensorMeasurement_(const ContainerAllocator& _alloc)
    : sensor_id(_alloc)
    , id(0)
    , position(_alloc)
    , theta(0.0)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , velocity(_alloc)
    , type(_alloc)
    , sub_type(_alloc)
    , timestamp(0.0)
    , box(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef int32_t _id_type;
  _id_type id;

   typedef  ::cyber_common_msgs::Point3D_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _length_type;
  _length_type length;

   typedef double _width_type;
  _width_type width;

   typedef double _height_type;
  _height_type height;

   typedef  ::cyber_common_msgs::Point3D_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::cyber_perception_msgs::ObstacleType_<ContainerAllocator>  _type_type;
  _type_type type;

   typedef  ::cyber_perception_msgs::ObstacleSubType_<ContainerAllocator>  _sub_type_type;
  _sub_type_type sub_type;

   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef  ::cyber_perception_msgs::BBox2D_<ContainerAllocator>  _box_type;
  _box_type box;





  typedef boost::shared_ptr< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> const> ConstPtr;

}; // struct SensorMeasurement_

typedef ::cyber_perception_msgs::SensorMeasurement_<std::allocator<void> > SensorMeasurement;

typedef boost::shared_ptr< ::cyber_perception_msgs::SensorMeasurement > SensorMeasurementPtr;
typedef boost::shared_ptr< ::cyber_perception_msgs::SensorMeasurement const> SensorMeasurementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator2> & rhs)
{
  return lhs.sensor_id == rhs.sensor_id &&
    lhs.id == rhs.id &&
    lhs.position == rhs.position &&
    lhs.theta == rhs.theta &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.velocity == rhs.velocity &&
    lhs.type == rhs.type &&
    lhs.sub_type == rhs.sub_type &&
    lhs.timestamp == rhs.timestamp &&
    lhs.box == rhs.box;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator1> & lhs, const ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cyber_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d3c223459b2c3a8ddd0fd0edf09adf5";
  }

  static const char* value(const ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d3c223459b2c3a8ULL;
  static const uint64_t static_value2 = 0xddd0fd0edf09adf5ULL;
};

template<class ContainerAllocator>
struct DataType< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cyber_perception_msgs/SensorMeasurement";
  }

  static const char* value(const ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string sensor_id\n"
"int32 id\n"
"\n"
"cyber_common_msgs/Point3D position\n"
"float64 theta\n"
"float64 length\n"
"float64 width\n"
"float64 height\n"
"\n"
"cyber_common_msgs/Point3D velocity\n"
"\n"
"ObstacleType type\n"
"ObstacleSubType sub_type\n"
"float64 timestamp\n"
"BBox2D box  # only for camera measurements\n"
"================================================================================\n"
"MSG: cyber_common_msgs/Point3D\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/ObstacleType\n"
"uint8  UNKNOWN = 0\n"
"uint8  UNKNOWN_MOVABLE = 1\n"
"uint8  UNKNOWN_UNMOVABLE = 2\n"
"uint8  PEDESTRIAN = 3  # Pedestrian, usually determined by moving behavior.\n"
"uint8  BICYCLE = 4     # bike, motor bike\n"
"uint8  VEHICLE = 5     # Passenger car or truck.\n"
"\n"
"uint8 type\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/ObstacleSubType\n"
"uint8  UNKNOWN = 0\n"
"uint8  UNKNOWN_MOVABLE = 1\n"
"uint8  UNKNOWN_UNMOVABLE = 2\n"
"uint8  CAR = 3\n"
"uint8  VAN = 4\n"
"uint8  TRUCK = 5\n"
"uint8  BUS = 6\n"
"uint8  CYCLIST = 7\n"
"uint8  MOTORCYCLIST = 8\n"
"uint8  TRICYCLIST = 9\n"
"uint8  PEDESTRIAN = 10\n"
"uint8  TRAFFICCONE = 11\n"
"\n"
"uint8 type\n"
"================================================================================\n"
"MSG: cyber_perception_msgs/BBox2D\n"
"float64 xmin  # in pixels.\n"
"float64 ymin  # in pixels.\n"
"float64 xmax  # in pixels.\n"
"float64 ymax  # in pixels.\n"
;
  }

  static const char* value(const ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor_id);
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.theta);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.velocity);
      stream.next(m.type);
      stream.next(m.sub_type);
      stream.next(m.timestamp);
      stream.next(m.box);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorMeasurement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cyber_perception_msgs::SensorMeasurement_<ContainerAllocator>& v)
  {
    s << indent << "sensor_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::cyber_common_msgs::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::cyber_common_msgs::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "type: ";
    s << std::endl;
    Printer< ::cyber_perception_msgs::ObstacleType_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
    s << indent << "sub_type: ";
    s << std::endl;
    Printer< ::cyber_perception_msgs::ObstacleSubType_<ContainerAllocator> >::stream(s, indent + "  ", v.sub_type);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "box: ";
    s << std::endl;
    Printer< ::cyber_perception_msgs::BBox2D_<ContainerAllocator> >::stream(s, indent + "  ", v.box);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CYBER_PERCEPTION_MSGS_MESSAGE_SENSORMEASUREMENT_H
